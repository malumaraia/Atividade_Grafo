# Atividade_Grafo
# ==========================================
# REDE DE DISCIPLINAS E PR√â-REQUISITOS
# Modelagem de grafo direcionado em Python
# ==========================================

def adicionar_disciplina(grafo, disciplina):
    if disciplina not in grafo:
        grafo[disciplina] = []
        print(f"‚úÖ Disciplina '{disciplina}' adicionada com sucesso.")
    else:
        print("‚ö†Ô∏è Essa disciplina j√° existe.")


def remover_disciplina(grafo, disciplina):
    if disciplina in grafo:
        grafo.pop(disciplina)
        for prereqs in grafo.values():
            if disciplina in prereqs:
                prereqs.remove(disciplina)
        print(f"üóëÔ∏è Disciplina '{disciplina}' removida.")
    else:
        print("‚ö†Ô∏è Disciplina n√£o encontrada.")


def adicionar_prerequisito(grafo, prereq, disciplina):
    if prereq in grafo and disciplina in grafo:
        if disciplina not in grafo[prereq]:
            grafo[prereq].append(disciplina)
            print(f"‚úÖ '{prereq}' agora √© pr√©-requisito de '{disciplina}'.")
        else:
            print("‚ö†Ô∏è Essa rela√ß√£o j√° existe.")
    else:
        print("‚ö†Ô∏è Uma das disciplinas n√£o existe.")


def remover_prerequisito(grafo, prereq, disciplina):
    if prereq in grafo and disciplina in grafo[prereq]:
        grafo[prereq].remove(disciplina)
        print(f"üóëÔ∏è Pr√©-requisito '{prereq} -> {disciplina}' removido.")
    else:
        print("‚ö†Ô∏è Rela√ß√£o n√£o encontrada.")


def consultar_prerequisitos(grafo, disciplina):
    prereqs = [d for d, deps in grafo.items() if disciplina in deps]
    if prereqs:
        print(f"üìò Pr√©-requisitos de '{disciplina}': {', '.join(prereqs)}")
    else:
        print(f"üìò '{disciplina}' n√£o possui pr√©-requisitos.")


def existe_dependencia(grafo, origem, destino, visitados=None):
    if visitados is None:
        visitados = set()
    if origem == destino:
        return True
    visitados.add(origem)
    for vizinho in grafo[origem]:
        if vizinho not in visitados:
            if existe_dependencia(grafo, vizinho, destino, visitados):
                return True
    return False


def tem_ciclo(grafo):
    visitados = set()
    pilha = set()

    def dfs(v):
        visitados.add(v)
        pilha.add(v)
        for vizinho in grafo[v]:
            if vizinho not in visitados:
                if dfs(vizinho):
                    return True
            elif vizinho in pilha:
                return True
        pilha.remove(v)
        return False

    for v in grafo:
        if v not in visitados:
            if dfs(v):
                return True
    return False


def ordenacao_topologica(grafo):
    visitados = set()
    ordem = []

    def dfs(v):
        visitados.add(v)
        for vizinho in grafo[v]:
            if vizinho not in visitados:
                dfs(vizinho)
        ordem.append(v)

    for v in grafo:
        if v not in visitados:
            dfs(v)
    ordem.reverse()
    return ordem


def caminho_ate(grafo, inicio, fim, caminho=None):
    if caminho is None:
        caminho = [inicio]
    if inicio == fim:
        return caminho
    for vizinho in grafo[inicio]:
        if vizinho not in caminho:
            novo_caminho = caminho_ate(grafo, vizinho, fim, caminho + [vizinho])
            if novo_caminho:
                return novo_caminho
    return None


# ==========================================
# MENU INTERATIVO
# ==========================================

def mostrar_menu():
    print("\n===== REDE DE DISCIPLINAS =====")
    print("1. Adicionar disciplina")
    print("2. Remover disciplina")
    print("3. Adicionar pr√©-requisito")
    print("4. Remover pr√©-requisito")
    print("5. Consultar pr√©-requisitos de uma disciplina")
    print("6. Verificar depend√™ncia entre duas disciplinas")
    print("7. Verificar se h√° ciclos")
    print("8. Gerar ordem de disciplinas (ordena√ß√£o topol√≥gica)")
    print("9. Visualizar caminho at√© uma disciplina final")
    print("0. Sair")
    return input("Escolha uma op√ß√£o: ")


def main():
    grafo = {}

    while True:
        opcao = mostrar_menu()

        if opcao == "1":
            d = input("Nome da disciplina: ")
            adicionar_disciplina(grafo, d)

        elif opcao == "2":
            d = input("Nome da disciplina a remover: ")
            remover_disciplina(grafo, d)

        elif opcao == "3":
            p = input("Nome do pr√©-requisito: ")
            d = input("Nome da disciplina: ")
            adicionar_prerequisito(grafo, p, d)

        elif opcao == "4":
            p = input("Nome do pr√©-requisito: ")
            d = input("Nome da disciplina: ")
            remover_prerequisito(grafo, p, d)

        elif opcao == "5":
            d = input("Nome da disciplina: ")
            consultar_prerequisitos(grafo, d)

        elif opcao == "6":
            o = input("Disciplina de origem: ")
            d = input("Disciplina de destino: ")
            if o in grafo and d in grafo:
                dep = existe_dependencia(grafo, o, d)
                print("üîó Existe depend√™ncia?" , "Sim" if dep else "N√£o")
            else:
                print("‚ö†Ô∏è Uma das disciplinas n√£o existe.")

        elif opcao == "7":
            print("‚ôªÔ∏è O grafo possui ciclos?", "Sim" if tem_ciclo(grafo) else "N√£o")

        elif opcao == "8":
            ordem = ordenacao_topologica(grafo)
            print("üìö Ordem poss√≠vel de conclus√£o:")
            print(" ‚Üí ".join(ordem))

        elif opcao == "9":
            i = input("Disciplina inicial: ")
            f = input("Disciplina final: ")
            if i in grafo and f in grafo:
                caminho = caminho_ate(grafo, i, f)
                if caminho:
                    print("üß≠ Caminho:", " ‚Üí ".join(caminho))
                else:
                    print("‚ö†Ô∏è N√£o h√° caminho entre essas disciplinas.")
            else:
                print("‚ö†Ô∏è Uma das disciplinas n√£o existe.")

        elif opcao == "0":
            print("üëã Encerrando o programa...")
            break

        else:
            print("‚ùå Op√ß√£o inv√°lida. Tente novamente.")


if __name__ == "__main__":
    main()